config cubes_1_debug
{
    vertex_shader
    {
        uint_t vid : vertex_id ;
        data_buffer_t u_data ;

        vec2_t u_field ;
        
        vec2_t u_wave_amp ;
        vec2_t u_wave_freq ;
        vec2_t u_wave_phase ;

        vec2_t u_poi ;

        mat4_t proj : projection ;
        mat4_t view : view ;
        mat4_t world : world ;

        in vec3_t nrm : normal ;
        in vec2_t tx : texcoord ; 
        in vec3_t pos : position ;

        out vec4_t pos : position ;
        out vec2_t tx : texcoord ;
        out vec3_t nrm : normal ;
        out vec4_t col : color ;

        void main()
        {
            int_t idx = msl.cubes.make_idx( vid ) ;
            vec4_t pos_scl = msl.cubes.extract_position_scale( idx, u_data ) ;
            vec4_t color = msl.cubes.extract_color( idx, u_data ) ;

            vec3_t pos = msl.cubes.transform_position( in.pos ) ;

            vec2_t field_pos = msl.cubes.field_pos( float_t(idx), u_field ) ;
            /*
            pos.y = pos.y * msl.cubes.wave_y( 
                    field_pos/u_field, 
                    //u_wave_amp,
                    as_vec2( 0.0),
                    //u_wave_freq,
                    as_vec2(0.0),
                    u_wave_phase ) ;
                    */
            float_t poi_dist = length( field_pos - u_poi ) / 100.0 ;
            /*
            {
                float_t pdn = min( poi_dist, 1.0 ) ;
                float_t s = sin( pdn * u_wave_freq.x * 3.164345 - u_wave_phase.x -u_poi.x-u_poi.y )  ;
                pos.y = pos.y * (1.0-poi_dist)*u_wave_amp.x * (s*0.5+0.5) ;
            }
            */
            {
                float_t dist = max( length( field_pos - u_poi ) - u_wave_phase.x, 0.0 ) ;
                float_t pdn = min( dist/100.0, 1.0 ) ;
                float_t s = u_wave_amp.x * sin( pdn * u_wave_freq.x * 3.164345   )  ;
                pos.y = pos.y * (1.0-min(dist/20.0, 1.0))*(s*0.5+0.5) ;
            }
            pos = pos ' vec3_t( pos_scl.w, 30.0, pos_scl.w )+ pos_scl.xyz ;
            out.pos = proj * view * vec4_t( pos, 1.0 ) ; 
            out.col = color * (poi_dist) ;
            out.tx = in.tx ;
            out.nrm = normalize( world * vec4_t(in.nrm, 0.0 ) ).xyz ;
        }
    }

    pixel_shader
    {
        tex2d_t tex ;
        vec4_t color ;

        in vec2_t tx : texcoord ;
        in vec3_t nrm : normal ;
        in vec4_t col : color ;

        out vec4_t color : color0 ;
        //out vec4_t color1 : color1 ;
        //out vec4_t color2 : color2 ;

        void main()
        {
            vec3_t light_pos = vec3_t( 1.0, 1.0, 1.0 ) ;
            float_t ndl = dot( in.nrm, normalize( light_pos ) ) ;
            
            out.color = vec4_t( as_vec3(ndl), 1.0) ' in.col ; //' texture( tex, in.tx ) ' in.col ;
        }
    }
}
